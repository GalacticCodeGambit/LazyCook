name: Check "Time" field before Done (Projects v2)

on:
  workflow_dispatch:  # Manuell testbar
  project_item:
    types: [edited]

jobs:
  check-time:
    runs-on: ubuntu-latest

    steps:
      - name: Prüfe Project Item auf fehlendes Time-Feld
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const item = context.payload.project_item;
            const projectId = item.project_node_id;

            // Hole Daten über die GraphQL API
            const query = `
              query($id: ID!) {
                node(id: $id) {
                  ... on ProjectV2Item {
                    id
                    fieldValues(first: 20) {
                      nodes {
                        projectField {
                          name
                        }
                        value
                      }
                    }
                  }
                }
              }
            `;
            const result = await github.graphql(query, { id: item.node_id });
            const fields = result.node.fieldValues.nodes;

            const status = fields.find(f => f.projectField?.name === "Status")?.value ?? "";
            const time = fields.find(f => f.projectField?.name === "Time")?.value ?? "";

            if (status === "Done" && (!time || time.trim() === "")) {
              core.notice("Time ist leer – ändere Status zurück auf In Progress.");

              // Suche die Field-ID für "Status"
              const fieldQuery = `
                query($project: ID!) {
                  node(id: $project) {
                    ... on ProjectV2 {
                      fields(first: 50) {
                        nodes {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              `;
              const fieldsData = await github.graphql(fieldQuery, { project: projectId });
              const statusField = fieldsData.node.fields.nodes.find(f => f.name === "Status");
              if (!statusField) {
                core.setFailed("Status-Feld wurde nicht gefunden.");
                return;
              }

              // Status auf "In Progress" setzen
              const mutation = `
                mutation($itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: "${projectId}",
                      itemId: $itemId,
                      fieldId: $fieldId,
                      value: { singleSelectOptionId: $value }
                    }
                  ) { projectV2Item { id } }
                }
              `;

              // ID der Option "In Progress" holen
              const optionQuery = `
                query($project: ID!) {
                  node(id: $project) {
                    ... on ProjectV2 {
                      fields(first: 50) {
                        nodes {
                          ... on ProjectV2SingleSelectField {
                            name
                            options { id name }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const optionsData = await github.graphql(optionQuery, { project: projectId });
              const statusFieldOptions = optionsData.node.fields.nodes.find(f => f.name === "Status");
              const inProgressOption = statusFieldOptions.options.find(o => o.name === "In Progress");
              
              if (!inProgressOption) {
                core.setFailed("Option 'In Progress' nicht gefunden.");
                return;
              }

              await github.graphql(mutation, {
                itemId: item.node_id,
                fieldId: statusField.id,
                v
